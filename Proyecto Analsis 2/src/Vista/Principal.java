/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Vista;

import Modelo.HeapSort;
import Modelo.InsertSort;
import Modelo.MetodosVarios;
import Modelo.Mmatriz;
import Modelo.Nodo;
import Modelo.QuickSort;
import Modelo.Sudoku;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Andres
 */
public class Principal extends javax.swing.JFrame implements Runnable {

    MetodosVarios metodos = new MetodosVarios();
    QuickSort quickSort = new QuickSort();
    InsertSort insertSort = new InsertSort();
    HeapSort heapsort = new HeapSort();
    Mmatriz multMatriz = new Mmatriz();
    Sudoku sudoku = new Sudoku();
    int[] arreglo = {5, 7, 8, 5, 4, 1, 3, 6, 8, 10, 35};
    int lineaActual = -1;
    int indexEjecucion = -1;
    DefaultTableModel modelTableExcecution;
    DefaultListModel<String> modelListVariables;
    private int algoritmo = 0;
    boolean pausar = false;
    private final Object GUI_INITIALIZATION_MONITOR = new Object();
    boolean controlquicksort = false;
    boolean controlinsertsort = false;
    boolean controlheapsort = false;
    boolean controlmulti = false;
    Thread thagl = new Thread(this);

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        inicializarTableModel();
        inicializarListVariableModel();

    }

    private LinkedList<String> listarVariablesRegistro(HashMap<String, String> variables) {
        LinkedList<String> vars = new LinkedList<>();
        for (String llave : variables.keySet()) {
            vars.add(llave + " = " + variables.get(llave));
        }
        return vars;
    }

    private void inicializarListVariableModel() {
        this.modelListVariables = new DefaultListModel<>();
        this.listVariables.setModel(modelListVariables);
    }

    private void inicializarTableModel() {
        modelTableExcecution = new DefaultTableModel();
        modelTableExcecution.addColumn("Lineas ejecutadas");
        modelTableExcecution.addColumn("Identificador ambiente");
        modelTableExcecution.addColumn("Algoritmo");
        this.tableEjecucion.setModel(modelTableExcecution);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listaalgoritmos = new javax.swing.JList();
        btnEjecutarAlg = new javax.swing.JButton();
        scrollTableExcecution = new javax.swing.JScrollPane();
        tableEjecucion = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        listVariables = new javax.swing.JList();
        txtEntradaDAtos = new javax.swing.JTextField();
        btnEntradaDatos = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        panel1 = new Vista.Panel();
        btnQuickSort = new javax.swing.JButton();
        btnInserSort = new javax.swing.JButton();
        btnHeapSort = new javax.swing.JButton();
        btnMultMatrix = new javax.swing.JButton();
        btnLineaAnterior = new javax.swing.JButton();
        btnpausa = new javax.swing.JButton();
        btncontinuar = new javax.swing.JButton();
        btnautomatico = new javax.swing.JButton();
        btnComplejidad = new javax.swing.JButton();
        btnSudoku = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableSUdoku = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        listaalgoritmos.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 14)); // NOI18N
        listaalgoritmos.setEnabled(false);
        jScrollPane1.setViewportView(listaalgoritmos);

        btnEjecutarAlg.setText("Siguiente");
        btnEjecutarAlg.setEnabled(false);
        btnEjecutarAlg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjecutarAlgActionPerformed(evt);
            }
        });

        tableEjecucion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "lineas ejecutadas", "id ambiente", "algoritmo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableEjecucion.setEnabled(false);
        tableEjecucion.getTableHeader().setReorderingAllowed(false);
        scrollTableExcecution.setViewportView(tableEjecucion);

        listVariables.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listVariables.setEnabled(false);
        jScrollPane2.setViewportView(listVariables);

        txtEntradaDAtos.setEnabled(false);

        btnEntradaDatos.setText("Procesar entrada de datos");
        btnEntradaDatos.setEnabled(false);
        btnEntradaDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEntradaDatosActionPerformed(evt);
            }
        });

        jScrollPane3.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jScrollPane3MouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jScrollPane3MouseMoved(evt);
            }
        });
        jScrollPane3.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                jScrollPane3MouseWheelMoved(evt);
            }
        });
        jScrollPane3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane3MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jScrollPane3MousePressed(evt);
            }
        });

        panel1.setBackground(new java.awt.Color(255, 255, 255));
        panel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1252, Short.MAX_VALUE)
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 337, Short.MAX_VALUE)
        );

        jScrollPane3.setViewportView(panel1);

        btnQuickSort.setText("QuickSort");
        btnQuickSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuickSortActionPerformed(evt);
            }
        });

        btnInserSort.setText("InsertSort");
        btnInserSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInserSortActionPerformed(evt);
            }
        });

        btnHeapSort.setText("HeapSort");
        btnHeapSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHeapSortActionPerformed(evt);
            }
        });

        btnMultMatrix.setText("Multiplicacion de matrices");
        btnMultMatrix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMultMatrixActionPerformed(evt);
            }
        });

        btnLineaAnterior.setText("Anterior");
        btnLineaAnterior.setEnabled(false);
        btnLineaAnterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLineaAnteriorActionPerformed(evt);
            }
        });

        btnpausa.setText("Pausa");
        btnpausa.setEnabled(false);
        btnpausa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnpausaActionPerformed(evt);
            }
        });

        btncontinuar.setText("Continuar");
        btncontinuar.setEnabled(false);
        btncontinuar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncontinuarActionPerformed(evt);
            }
        });

        btnautomatico.setBackground(new java.awt.Color(204, 204, 255));
        btnautomatico.setForeground(new java.awt.Color(255, 255, 255));
        btnautomatico.setText("automatico");
        btnautomatico.setEnabled(false);
        btnautomatico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnautomaticoActionPerformed(evt);
            }
        });

        btnComplejidad.setText("Complejidad");
        btnComplejidad.setEnabled(false);
        btnComplejidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComplejidadActionPerformed(evt);
            }
        });

        btnSudoku.setText("Sudoku");
        btnSudoku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSudokuActionPerformed(evt);
            }
        });

        tableSUdoku.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableSUdoku.getTableHeader().setResizingAllowed(false);
        tableSUdoku.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(tableSUdoku);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollTableExcecution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnInserSort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMultMatrix))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnQuickSort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnHeapSort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSudoku, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEntradaDatos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtEntradaDAtos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnLineaAnterior, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEjecutarAlg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnautomatico, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(btnpausa, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btncontinuar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnComplejidad)
                .addGap(234, 234, 234))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnQuickSort)
                    .addComponent(btnHeapSort)
                    .addComponent(txtEntradaDAtos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEjecutarAlg)
                    .addComponent(btnautomatico)
                    .addComponent(btnComplejidad)
                    .addComponent(btnSudoku))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInserSort)
                    .addComponent(btnMultMatrix)
                    .addComponent(btnEntradaDatos)
                    .addComponent(btnLineaAnterior)
                    .addComponent(btnpausa)
                    .addComponent(btncontinuar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scrollTableExcecution, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ejecutarEstado(LinkedList<LinkedList<HashMap<String, String>>> estados) {
        lineaActual = Integer.parseInt(estados.get(indexEjecucion).get(0).get("lineaSiguiente"));

        modelTableExcecution.insertRow(0, new Object[]{indexEjecucion, estados.get(indexEjecucion).get(0).get("idMio"), estados.get(indexEjecucion).get(0).get("nombre")});
        LinkedList<String> variables = this.listarVariablesRegistro(estados.get(indexEjecucion).get(1));

        panel1.setEstadoActual(estados.get(indexEjecucion).get(0).get("idMio"));
        //panelprueba1.setAmbiente(estados.get(indexEjecucion).get(0).get("idMio"));
        //this.graficarArbol(metodos.generarNodos(estados), Integer.parseInt(estados.get(indexEjecucion).get(0).get("idMio")));
        //panelprueba1.repaint();

        modelListVariables.removeAllElements();
        for (String variable : variables) {
            modelListVariables.addElement(variable);
        }
        this.tableEjecucion.setRowSelectionInterval(0, 0);

        this.listaalgoritmos.setSelectedIndex(lineaActual);
    }

    private void ejecutarEstadoSudoku(LinkedList<LinkedList<HashMap<String, String>>> estados) {
        lineaActual = Integer.parseInt(estados.get(indexEjecucion).get(0).get("lineaSiguiente"));

        modelTableExcecution.insertRow(0, new Object[]{indexEjecucion, estados.get(indexEjecucion).get(0).get("idMio"), estados.get(indexEjecucion).get(0).get("nombre")});
        LinkedList<String> variables = this.listarVariablesRegistro(estados.get(indexEjecucion).get(1));

        //panel1.setEstadoActual(estados.get(indexEjecucion).get(0).get("idMio"));
        //panelprueba1.setAmbiente(estados.get(indexEjecucion).get(0).get("idMio"));
        //this.graficarArbol(metodos.generarNodos(estados), Integer.parseInt(estados.get(indexEjecucion).get(0).get("idMio")));
        //panelprueba1.repaint();

        modelListVariables.removeAllElements();
        for (String variable : variables) {
            modelListVariables.addElement(variable);
        }
        this.tableEjecucion.setRowSelectionInterval(0, 0);
        String tablero = estados.get(indexEjecucion).get(1).get("tablero");
        this.generarModeloMatrizSudoku(this.sudoku.cadenaToMatriz(tablero));
        this.listaalgoritmos.setSelectedIndex(lineaActual);
    }

    private void btnEjecutarAlgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjecutarAlgActionPerformed
        if (this.algoritmo == 1) {
            if (indexEjecucion < quickSort.getRegistroAmbientes().size() - 1) {
                indexEjecucion++;
                this.ejecutarEstado(quickSort.getRegistroAmbientes());
                this.btnLineaAnterior.setEnabled(true);
            }
        } else if (this.algoritmo == 2) {
            if (indexEjecucion < insertSort.getRegistroAmbientes().size() - 1) {
                indexEjecucion++;
                this.ejecutarEstado(insertSort.getRegistroAmbientes());
                this.btnLineaAnterior.setEnabled(true);

            }
        } else if (this.algoritmo == 3) {
            if (indexEjecucion < heapsort.getRegistroAmbientes().size() - 1) {
                indexEjecucion++;
                this.ejecutarEstado(heapsort.getRegistroAmbientes());
                this.btnLineaAnterior.setEnabled(true);
            }

        } else if (this.algoritmo == 4) {
            if (indexEjecucion < multMatriz.getRegistroAmbientes().size() - 1) {
                indexEjecucion++;
                this.ejecutarEstado(multMatriz.getRegistroAmbientes());
                this.btnLineaAnterior.setEnabled(true);
            }

        }else if(this.algoritmo == 5){
            if (indexEjecucion < sudoku.getRegistroAmbientes().size() - 1) {
                indexEjecucion++;
                this.ejecutarEstadoSudoku(sudoku.getRegistroAmbientes());
                //this.btnLineaAnterior.setEnabled(true);
            }
        }
    }//GEN-LAST:event_btnEjecutarAlgActionPerformed

    private void btnEntradaDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEntradaDatosActionPerformed
        if (!txtEntradaDAtos.getText().equalsIgnoreCase("")) {
            if (this.algoritmo == 1) {
                String[] stringArray = this.txtEntradaDAtos.getText().split(",");
                this.arreglo = new int[stringArray.length];
                for (int i = 0; i < stringArray.length; i++) {
                    arreglo[i] = Integer.parseInt(stringArray[i]);
                }
                quickSort.QuickSort(arreglo);

                this.listaalgoritmos.setSelectedIndex(lineaActual);
                panel1.pintarArbol(metodos.generarNodos(quickSort.getRegistroAmbientes()),"QuickSort");
                quickSort.setArbol(panel1.getA());
                //panelprueba1.setarbol(e.Escena(metodos.generarNodos(quickSort.getRegistroAmbientes())));
                //this.graficarArbol(metodos.generarNodos(quickSort.getRegistroAmbientes()), 1);
                this.listVariables.setEnabled(true);
                this.btnEjecutarAlg.setEnabled(true);
                this.btnComplejidad.setEnabled(true);
                btnautomatico.setEnabled(true);

            } else if (this.algoritmo == 2) {
                String[] stringArray = this.txtEntradaDAtos.getText().split(",");
                this.arreglo = new int[stringArray.length];
                for (int i = 0; i < stringArray.length; i++) {
                    arreglo[i] = Integer.parseInt(stringArray[i]);
                }
                this.insertSort.Sort(arreglo);

                this.listaalgoritmos.setSelectedIndex(lineaActual);
                panel1.pintarArbol(metodos.generarNodos(this.insertSort.getRegistroAmbientes()),"InsertSort");
                //panelprueba1.setarbol(e.Escena(metodos.generarNodos(this.insertSort.getRegistroAmbientes())));
                this.listVariables.setEnabled(true);
                this.btnComplejidad.setEnabled(true);
                this.btnEjecutarAlg.setEnabled(true);

                btnautomatico.setEnabled(true);
            } else if (this.algoritmo == 3) {
                String[] stringArray = this.txtEntradaDAtos.getText().split(",");
                this.arreglo = new int[stringArray.length];
                for (int i = 0; i < stringArray.length; i++) {
                    arreglo[i] = Integer.parseInt(stringArray[i]);
                }
                this.heapsort.heapSort(arreglo);

                this.listaalgoritmos.setSelectedIndex(lineaActual);
                panel1.pintarArbol(metodos.generarNodos(this.heapsort.getRegistroAmbientes()),"HeapSort");
                //panelprueba1.setarbol(e.Escena(metodos.generarNodos(this.heapsort.getRegistroAmbientes())));
                this.listVariables.setEnabled(true);
                this.btnComplejidad.setEnabled(true);
                this.btnEjecutarAlg.setEnabled(true);

                btnautomatico.setEnabled(true);
            } else if (this.algoritmo == 4) {
                String[] stringArray = this.txtEntradaDAtos.getText().split(",");
                this.arreglo = new int[stringArray.length];
                for (int i = 0; i < stringArray.length; i++) {
                    arreglo[i] = Integer.parseInt(stringArray[i]);
                }
                this.multMatriz.mult(arreglo);

                this.listaalgoritmos.setSelectedIndex(lineaActual);
                panel1.pintarArbol(metodos.generarNodos(this.multMatriz.getRegistroAmbientes()),"multiplicacionMatrices");
                //panelprueba1.setarbol(e.Escena(metodos.generarNodos(this.multMatriz.getRegistroAmbientes())));
                this.listVariables.setEnabled(true);
                this.btnComplejidad.setEnabled(true);
                this.btnEjecutarAlg.setEnabled(true);

                btnautomatico.setEnabled(true);
            }

        } else {
            if (this.algoritmo == 5) {
                this.sudoku.resolver(this.sudoku.getTablero());
                this.listaalgoritmos.setSelectedIndex(lineaActual);
                sudoku.imprimir(sudoku.getTablero());
                //this.generarModeloMatrizSudoku(sudoku.getTablero());
                //metodos.generarNodos(this.sudoku.getRegistroAmbientes());
                //panel1.pintarArbol(metodos.generarNodos(this.sudoku.getRegistroAmbientes()));
                //panelprueba1.setarbol(e.Escena(metodos.generarNodos(this.multMatriz.getRegistroAmbientes())));
                this.listVariables.setEnabled(true);
            }
        }
    }//GEN-LAST:event_btnEntradaDatosActionPerformed

    private void btnMultMatrixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMultMatrixActionPerformed
        txtEntradaDAtos.setEnabled(true);
        btnEntradaDatos.setEnabled(true);
        btnEjecutarAlg.setEnabled(false);
        btnLineaAnterior.setEnabled(false);
        btnautomatico.setEnabled(false);
        btnpausa.setEnabled(false);
        btncontinuar.setEnabled(false);
        controlmulti = true;
        controlinsertsort = false;
        controlquicksort = false;
        controlheapsort = false;
        seleccionarAlgoritmo("Algoritmos/Multiplicaionmatrices");
        this.algoritmo = 4;
    }//GEN-LAST:event_btnMultMatrixActionPerformed

    private void btnQuickSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuickSortActionPerformed
        txtEntradaDAtos.setEnabled(true);
        btnEntradaDatos.setEnabled(true);
        btnEjecutarAlg.setEnabled(false);
        btnLineaAnterior.setEnabled(false);
        btnautomatico.setEnabled(false);
        btnpausa.setEnabled(false);
        btncontinuar.setEnabled(false);
        controlquicksort = true;
        controlheapsort = false;
        controlinsertsort = false;
        controlmulti = false;
        seleccionarAlgoritmo("Algoritmos/QuickSort");
        this.algoritmo = 1;
    }//GEN-LAST:event_btnQuickSortActionPerformed

    private void btnInserSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInserSortActionPerformed
        txtEntradaDAtos.setEnabled(true);
        btnEntradaDatos.setEnabled(true);
        btnEjecutarAlg.setEnabled(false);
        btnLineaAnterior.setEnabled(false);
        btnautomatico.setEnabled(false);
        btnpausa.setEnabled(false);
        btncontinuar.setEnabled(false);
        controlinsertsort = true;
        controlquicksort = false;
        controlheapsort = false;
        controlmulti = false;
        seleccionarAlgoritmo("Algoritmos/InsertSort");
        this.algoritmo = 2;

    }//GEN-LAST:event_btnInserSortActionPerformed

    private void btnHeapSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHeapSortActionPerformed
        txtEntradaDAtos.setEnabled(true);
        btnEntradaDatos.setEnabled(true);
        btnEjecutarAlg.setEnabled(false);
        btnLineaAnterior.setEnabled(false);
        btnautomatico.setEnabled(false);
        btnpausa.setEnabled(false);
        btncontinuar.setEnabled(false);
        controlheapsort = true;
        controlinsertsort = false;
        controlquicksort = false;
        controlmulti = false;
        seleccionarAlgoritmo("Algoritmos/HeapSort");
        this.algoritmo = 3;
    }//GEN-LAST:event_btnHeapSortActionPerformed

    private void btnLineaAnteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLineaAnteriorActionPerformed
        if (this.algoritmo == 1) {
            if (indexEjecucion > 0) {
                indexEjecucion--;
                this.ejecutarEstado(this.quickSort.getRegistroAmbientes());
            }
        } else if (this.algoritmo == 2) {
            if (indexEjecucion > 0) {
                indexEjecucion--;
                this.ejecutarEstado(this.insertSort.getRegistroAmbientes());
            }
        } else if (this.algoritmo == 3) {
            if (indexEjecucion > 0) {
                indexEjecucion--;
                this.ejecutarEstado(this.heapsort.getRegistroAmbientes());
            }
        } else if (this.algoritmo == 4) {
            if (indexEjecucion > 0) {
                indexEjecucion--;
                this.ejecutarEstado(this.multMatriz.getRegistroAmbientes());
            }
        }
    }//GEN-LAST:event_btnLineaAnteriorActionPerformed

    private void btnpausaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnpausaActionPerformed
        this.btnLineaAnterior.setEnabled(true);
        btncontinuar.setEnabled(true);
        btnEjecutarAlg.setEnabled(true);
        btnLineaAnterior.setEnabled(true);
        try {
            pausa();
        } catch (InterruptedException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnpausaActionPerformed

    private void btncontinuarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncontinuarActionPerformed
        btnEjecutarAlg.setEnabled(false);
        btnLineaAnterior.setEnabled(false);
        continuar();
    }//GEN-LAST:event_btncontinuarActionPerformed

    private void btnautomaticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnautomaticoActionPerformed
        Thread th = new Thread(this);
        th.start();
        btncontinuar.setEnabled(false);
        btnEjecutarAlg.setEnabled(false);
        btnLineaAnterior.setEnabled(false);
        btnEntradaDatos.setEnabled(false);
        txtEntradaDAtos.setEditable(false);
        btnautomatico.setEnabled(false);
        btnpausa.setEnabled(true);
        btncontinuar.setEnabled(true);
    }//GEN-LAST:event_btnautomaticoActionPerformed

    private void jScrollPane3MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane3MouseDragged
        this.panel1.repaint();
    }//GEN-LAST:event_jScrollPane3MouseDragged

    private void jScrollPane3MouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_jScrollPane3MouseWheelMoved
        this.panel1.repaint();
    }//GEN-LAST:event_jScrollPane3MouseWheelMoved

    private void jScrollPane3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane3MouseClicked
        this.panel1.repaint();    }//GEN-LAST:event_jScrollPane3MouseClicked

    private void jScrollPane3MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane3MouseMoved
        this.panel1.repaint();    }//GEN-LAST:event_jScrollPane3MouseMoved

    private void jScrollPane3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane3MousePressed
        this.panel1.repaint();    }//GEN-LAST:event_jScrollPane3MousePressed

    private void btnComplejidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComplejidadActionPerformed
        if (this.algoritmo == 1) {
            JOptionPane.showMessageDialog(rootPane, quickSort.determinarComplejidad());
        } else if (this.algoritmo == 2) {
            JOptionPane.showMessageDialog(rootPane, insertSort.determinarComplejidad());
        } else if (this.algoritmo == 3) {
            JOptionPane.showMessageDialog(rootPane, heapsort.determinarComplejidad());
        } else if (this.algoritmo == 4) {
            JOptionPane.showMessageDialog(rootPane, multMatriz.determinarComplejidad());
        }
        btnComplejidad.setEnabled(false);
    }//GEN-LAST:event_btnComplejidadActionPerformed

    private void btnSudokuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSudokuActionPerformed
        //txtEntradaDAtos.setEnabled(true);
        //btnEntradaDatos.setEnabled(true);
        //btnEjecutarAlg.setEnabled(false);
        //btnLineaAnterior.setEnabled(false);
        //btnautomatico.setEnabled(false);
        //btnpausa.setEnabled(false);
        //btncontinuar.setEnabled(false);
        this.btnEjecutarAlg.setEnabled(true);
        controlheapsort = false;
        controlinsertsort = false;
        controlquicksort = false;
        controlmulti = false;
        seleccionarAlgoritmo("Algoritmos/Sudoku");
        this.algoritmo = 5;
        this.sudoku.cargarSudoku();
        
        this.generarModeloMatrizSudoku(this.sudoku.getTablero());
        this.sudoku.resolver(sudoku.getTablero());
    }//GEN-LAST:event_btnSudokuActionPerformed

    public void generarModeloMatrizSudoku(int[][] tablero) {
        DefaultTableModel model = new DefaultTableModel();

        model.setRowCount(9);
        //model.setColumnCount(9);
        model.addColumn("0");
        model.addColumn("1");
        model.addColumn("2");
        model.addColumn("3");
        model.addColumn("4");
        model.addColumn("5");
        model.addColumn("6");
        model.addColumn("7");
        model.addColumn("8");
        for (int i = 0; i < tablero.length; i++) {
            for (int j = 0; j < tablero.length; j++) {
                model.setValueAt(tablero[i][j], i, j);
            }
        }
        this.tableSUdoku.setModel(model);
        this.tableSUdoku.setEnabled(false);
    }

    private void graficarArbol(LinkedList<Nodo> nodos, int idAmbiente) {

        for (int i = 0; i < nodos.size(); i++) {

            //arbil.insertarhijo(Integer.parseInt(nodos.get(i).getidPropio()),Integer.parseInt(nodos.get(i).getidPadre()))
        }
        //arbol.grafigararbol
    }

    private void seleccionarAlgoritmo(String url) {
        DefaultListModel modelo = new DefaultListModel();
        File a = new File(url);
        FileReader fr;
        try {
            fr = new FileReader(a);
            BufferedReader br = new BufferedReader(fr);
            String linea;
            while ((linea = br.readLine()) != null) {
                modelo.addElement(linea);
            }
            this.listaalgoritmos.setModel(modelo);
            this.listaalgoritmos.setEnabled(true);
            this.txtEntradaDAtos.setEnabled(true);
            this.btnEntradaDatos.setEnabled(true);
            lineaActual = -1;
            indexEjecucion = -1;
            this.borrarTabla();
            this.listVariables.removeAll();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void borrarTabla() {
        int rows = this.modelTableExcecution.getRowCount();
        this.modelTableExcecution.setRowCount(0);
//        for (int i = 0; i < rows; i++) {
//            this.modelTableExcecution.removeRow(i);
//
//        }
//        for (int b : this.modelTableExcecution.setro) {
//            
//        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnComplejidad;
    private javax.swing.JButton btnEjecutarAlg;
    private javax.swing.JButton btnEntradaDatos;
    private javax.swing.JButton btnHeapSort;
    private javax.swing.JButton btnInserSort;
    private javax.swing.JButton btnLineaAnterior;
    private javax.swing.JButton btnMultMatrix;
    private javax.swing.JButton btnQuickSort;
    private javax.swing.JButton btnSudoku;
    private javax.swing.JButton btnautomatico;
    private javax.swing.JButton btncontinuar;
    private javax.swing.JButton btnpausa;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList listVariables;
    private javax.swing.JList listaalgoritmos;
    private Vista.Panel panel1;
    private javax.swing.JScrollPane scrollTableExcecution;
    private javax.swing.JTable tableEjecucion;
    private javax.swing.JTable tableSUdoku;
    private javax.swing.JTextField txtEntradaDAtos;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {

        switch (algoritmo) {
            case 1:

                while (indexEjecucion < quickSort.getRegistroAmbientes().size() - 1) {
                    if (controlquicksort) {
                        checkForPaused();
                        indexEjecucion++;
                        this.ejecutarEstado(quickSort.getRegistroAmbientes());
                        try {
                            Thread.sleep(250);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        break;
                    }

                }
                btnpausa.setEnabled(false);
                btncontinuar.setEnabled(false);
                break;

            case 2:
                checkForPaused();
                while (indexEjecucion < insertSort.getRegistroAmbientes().size() - 1) {
                    if (controlinsertsort) {
                        checkForPaused();
                        indexEjecucion++;
                        this.ejecutarEstado(insertSort.getRegistroAmbientes());
                        try {
                            Thread.sleep(500);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        break;
                    }

                }
                btnpausa.setEnabled(false);
                btncontinuar.setEnabled(false);
                break;

            case 3:

                while (indexEjecucion < heapsort.getRegistroAmbientes().size() - 1) {
                    if (controlheapsort) {
                        checkForPaused();
                        indexEjecucion++;
                        this.ejecutarEstado(heapsort.getRegistroAmbientes());
                        try {
                            Thread.sleep(500);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        break;
                    }

                }
                btnpausa.setEnabled(false);
                btncontinuar.setEnabled(false);
                break;

            case 4:

                while (indexEjecucion < multMatriz.getRegistroAmbientes().size() - 1) {
                    if (controlmulti) {
                        checkForPaused();
                        indexEjecucion++;
                        this.ejecutarEstado(multMatriz.getRegistroAmbientes());
                        try {
                            Thread.sleep(500);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        break;
                    }

                }
                btnpausa.setEnabled(false);
                btncontinuar.setEnabled(false);
                break;

        }

    }

    public synchronized void pausa() throws InterruptedException {
        pausar = true;
    }

    public synchronized void continuar() {
        synchronized (GUI_INITIALIZATION_MONITOR) {
            pausar = false;
            GUI_INITIALIZATION_MONITOR.notify();
        }
    }

    private void checkForPaused() {
        synchronized (GUI_INITIALIZATION_MONITOR) {
            while (pausar) {
                try {
                    GUI_INITIALIZATION_MONITOR.wait();
                } catch (Exception e) {
                }
            }
        }
    }
}
